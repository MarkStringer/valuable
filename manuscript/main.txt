#Working Software

##A Preface to Version 0.1
Years ago the BBC used to have a fantastic late night arts programme.  It was the kind of fantastic, eclectic publicly funded cornucopia of culture and civilisation that should never be allowed in a proper rabid capitalist society, and now, isn't.  Every night there was something on it that I'd never heard of, or something that I'd never heard of but was happy to know more about.  I remember one night there was an episode devoted to a writer's workshop with Joseph Heller.  The usual gaggle of English literature students, I think it was in Cambridge, were gathered around, asking the great man the usual questions that people who dream of being a write ask about who to be a writer.

Heller's main piece of advice was to not write a book. His advice was rather to write an *outline* for a book and the first and maybe another sample chapter.  His rationale was that publishers don't have time to read books, especially from unsolicited authors. They don't even from writers that they *like.*  But if you grabbed them in the first few pages, and then the like the outline, they might ask you for more.

And of course - a novel might take you a couple of years, but an introductory chapter and an outline, you could probably manage in a month.

Version 0.1 of this book will be published using the LeanPub platform. This is because I passionately believe in the power of an iterative approach to doing things.  I believe in the possibility of doing things using an iterative approach to achieve things that would otherwise simply not be possible.

Having put about six months of effort into developing a three day "introduction to Agile course." I have an uneasy awareness, that most things take a lot longer than you expect, even to get to the beginning of the end, five or six times as long, in my own experience.

What I want Version 0.1 of this book to be is a coherent "business novella". Which sets out in clear, readable prose a very different way of thinking about the whole business of how to get to working software. And has some clear practical suggestions for what to do to give yourself, your team or your organisation a chance of getting working software that will succeed. Software that not only works, but works and delivers value for your organisation.

And then of course, I want there to be a version 0.2 of the book that builds on the parts that work (without breaking them) and removes, refactors or replaces the parts that don't work. 

##Introduction
This book is my attempt to write the kind of book about managing software development that I'd like to read. A book that acknowledges the messy, vague, emotional and exhausting nature of managing software development.  It came to me when I was sitting on a bus a few years ago that all the books about project management and managing software development talk about how to do it right. This seemed to be me to very unhelpful for the many people (including myself) who were faced with managing software development projects that weren't being managed correctly. A lot of what was wrong with those project was simply out of my control and were in trouble the moment that they started.

Most projects start out with a vague idea of what the true requirements are.  They almost always have "aggressive timescales".  In fact, almost every project that I've ever worked on has been set up temporally, financially and contractually in a way that almost prohibits success. Almost. Most of these projects have ultimately ended up being late, over-budget and *valuable* for their customers.

This book is an attempt to get away from slick slogans, deceptive line-and-box diagrams and simple solutions. It's an attempt to demonstrate some of the complexity of managing software development, without being overly complex itself. The hope is by pointing out some of these complexities I can answer some of the questions that many project managers, Scrum Masters, delivery managers and Agile coaches I'm sure, ask themselves in the darkest quietest hours of the night, namely: "why is managing software development so hard?" and "What can I do about it?"

Fortunately, I think there are pretty good answers to both of these
questions.

###Why is Managing Software Development So Hard?
* The need for a Fata Morgana and the hiding hand as a way of motivating projects.
* The need for leaders (sociopaths) who are willing to hide risks and take chances to work with doers (losers) who actual do the work.
* The tendency of leaders (sociopaths) to try to motivate the work using the powerful psychological concept of commitment and consistency.
* The planning fallacy
* The uneven and opaque nature of the discovery of value.
* The inherent uncertainty of Working in a complex problem-solving environment.

##Fata Morgana
A mirage. That's what a fata morgana is - although it literally means "The Fairy Morgana" - the witch (who's a woman, so must obviously be bad) who is the enemy of the wizard Merlin (who, since he's a man, is obviously good).  But a fata morgana isn't just a trick of the light and a trick of the mind. Yes, in order for the mirage to appear the sun needs to be at a certain angle of incidence to the sea, the air above the see needs to be a certain temperature and humidity. And yes, a certain amount of what we see is also down to the mechanics of the human visual system. But in order for the fata morgana to really work, the desperate sailors on the ship who see the fata morgana really need to really need to see land.

This is an actual, physical, fata morgana. But metaphysical fatae morganae are in fact much more common. Here are some examples.

>A modern accounting system with an up-to-date UI that does exactly what the old one did - but integrates with all the systems that the old one didn't.

>Forsaking all others, in sickness and in health, for richer, for poorer, 'til death us do part.

><insert nationality here> jobs for <insert same nationality here> people.

>A man on the moon

>World peace

>And end to hunger

>A western trade route to India

Leaders, salesmen and sociopaths craft fatae morganae, but that in itself isn't enough to get a project, or a programme off the ground and for leaders, salesmen and sociopaths to make a living. The project is the vehicle to get to the fatae morganae (or at least, that's what the leader, salesman, sociopath tells everybody). 

But for the vehicle of the project to take off the leaders, salesmen, sociopaths have to do two more things: they have to understate the potential costs and risks and they have to overstate the potential benefits.

Leaders, salesmen and sociopaths are really helped in their endeavour by basic features of the situation. For example, in general people really like the idea of fatae morganae. There is an awful lot of "folk wisdom" that encourages the idea that we should devote lots of energy and resources towards "goals" that a simple, clear and obviously nonsense. "Follow your dream", "think positively". I feel like a species traitor to the human race for even mentioning this.

##Head I Win, Tails You Lose
>"I started out to find the Indies and will continue until I have accomplished that mission, with the help of our Lord."

*Christopher Columbus*

If you're in the business of getting everybody signed on to a project by polishing a fata morgana and by hiding the real risks and costs of embarking on an endeavour, then it would seem that you're taking an enormous risk yourself. If like Christopher Columbus, you've persuaded one of the most powerful people in the world to give you a large amount of money - on the promise of a large amount of return - and you've also persuaded all of the people on the crew of the ship, not only to risk their livelihoods, but their actual *lives* as part of your get rich scheme, you might be worried that if it turns out that there *isn't* a western route to India, you're going to be in big trouble.

This tends not to bother visionaries/leaders/sociopaths for two important reasons.

1) they are instinctively risk-taking - they to some degree actually believe that the fata morgana is reachable
2) they intuitively know that if things go badly wrong they will either be able to escape before things get too bad, or blame someone else.

Of course, if the fata morgana *is* reached - or if something even more valuable than the fata morgana turns up on the way to the fata morgana, like maybe, America, the visionary/leader/sociopath will make damn sure that the credit and the profits go to them rather than any of the people who did the actual work. This is the crux of the "Heads I win, tails, you lose" principle.

It may be that as you read this, you think that I'm making out being a leader/visionary/sociopath, who deceives their fellow men and women into taking disproportionate risks and encountering disproportionate costs in pursuit of a chimeric, mirage of a fata morgana to be a bad kind of person. By pointing out that in order to survive, this kind of person has to take credit, where possibly credit isn't due and avoid and transfer blame to where blame isn't due.  And you'd be right. There's a part of me that loathes this kind of dishonesty and disingenuousness. There's a part of me that really does not want to have to be dealing with people who behave like this on a day to day basis.  That really doesn't want to be engaging with people like this professionally.

That was certainly my "going in" position when starting to think about the whole business of visionary/leader/sociopaths.

##Valuable
I run this exercise at the beginning of almost every course that I run on Agile software development.  I'm not sure where it originated. I got it from my friend Matt Gould.  

The exercise is really simple. Divide the trainees into teams.  Give them flip chart paper and marker pens.  On the first piece of flip chart paper, ask them to draw a stick person. At this point, because we're very early on in the course and people are still being shy, someone normally says "ooh I can't draw" and I have to say "it doesn't have to be a *good* stick person.  Just *any stick person* will do." 

Ask each team to give the stick person a smiley face. Then ask the team to write down as many words and phrases as they can which they associate with a *happy* project - with a project that's going well. This is a brainstorming type activity.  There are no "wrong" answers. There are some jokes along the "What's a happy project, I've never worked on one of those" lines. Then the trainees settle to the job and write a bunch of words and phrases.  Almost always, "On-time" and "to-budget" are the first things they write down. Try to get some more things written around the "happy" stick person by asking them what it feels like to work on a happy project, for example - if you've taken a long weekend away from a happy project, long enough to forget slightly that you're working on it, what does it *feel* like to come back to working on that project.  Also ask them to think about what they would notice about a flatmate or a loved one who was working on a "happy project." 

Ask the same people to draw another stick person with a sad face. Ask them to write around the stick person with the sad face any words and phrases that they associate with an *unhappy* project, with a project that *isn't* going well.  Often the first things that the teams will write down is "late" and "over-budget." When asked how they will feel when coming back to such a project after a long weekend away, the teams often write "dread", "depression." 

What phrases do most people associate with a successful project? "On-time and to-budget." What phrases do most people associate with an unsuccessful project "Late and over-budget." Is this really a surprise? What might be a surprise is what's missing from these descriptions of successful and unsuccessful projects. Almost never is there any mention of the project being valuable, almost never is there any mention of a customer! Sometimes, just occasionally, there's a mention of money - not in terms of budget, but it terms of *making money.* 

I don't think money is actually the only reason why a project might turn out to be valuable. I've seen projects for publishers, government departments and curiously, even banks, that were successful but were delivering other kinds of value - salvation from loss of face, speedier justice and a more effective system of fraud detection. But money isn't a bad thing to see on the posters that are produced for this activity because mentioning money at least indicates that the business we're about (or should be about) when we're working on projects or managing projects is delivering some kind of value.


##Commitment and Consistency
I was working as a Scrum Master (I want to say "in a cocktail bar", but that much isn't true) in a start-up called Grill.  It was a good company to work for. It trusted its employees. It had no set working hours. It had no place that you had to be working from.  The directors empowered the employees to spend the money they needed (and claim it back as expenses) to get the job done.  They were very enthusiastic about Agile, and that was one of the reasons that they'd bought me in, they'd tried to run something like Scrum and then realised they needed a Scrum Master who knew who'd done in already.  


Most of the development was done off-shore, in the Czech state and in Poland, but also, in France and we had a UI Designer who was in South Korea.

The feedback I got from them was that having me around really helped.  What I did for them as a Scrum Master was just try to provide as much visibility as possible of what was being worked on and as much visibility as possible on what was coming up. Visibility was the real problem because everybody was working remotely. We used Scrum and sprint planning for the stuff that was being worked on and we used Kanban for the stuff that was coming up.  

Just before I had arrived, the directors had brought in a new chairmen - George, who as well as  working for this company ran several of his own.

There were two worries that I had about George.  Firstly, out of the corner of my eye, I could tell he was bullying the sales guy, making him work very long days, asking him to write and re-write things. I had a lot of work to do being a Scrum Master, and sales wasn't really my area, so there wasn't much I could do about that, except notice it out of the corner of my eye and think that at some point, when my standing had increased, I might have to get more involved.
 
The other thing was that he was asking me to give him a "Gantt" for the project that I was working on with him - the Big Hospital Publishing Project. 

George and I got involved in two car crash meetings. At George's insistence, I had put something together like a "Gantt" (or my understanding of a Gantt chart - which is just a prioritised product backlog turned through 90 degrees).  Using my Scrum Master thinking, I'd only detailed it for the first twenty-five percent of the project. The rest of the plan I'd left in big lumps with high-level labels.

In theory, the project was blessed because it had involvement of someone from the client side who actually wanted the project to happen. Let's call her Jane. So we had a meeting where I went through the "Gantt" with George and Jane. As I said, it was a car crash. I'm not quite sure what happened. I think what probably happened was that I used a Gantt/release chart to create exactly the opposite impression for Jane than the one that George wanted.  I think that I probably made it clear that the project was an inherently risky and uncertain endeavour that would take far longer than Jane was expecting (and therefore would cost far more than she expected).

After the meeting George rang me up and said that he couldn't believe what I'd done.  Never in his professional life had anyone behaved the way I'd done.

It seemed that George thought I'd broken some fundamental rule of client-supplier relations. I'd made it clear how vague the project was and how long it was likely to take.

When George rang me I cheerfully acknowledged that the project was likely to take much longer than initially expected. And at the end of that conversation George did something that nobody in those seventeen years working had ever done to me before - he hung up on me. 

A week went by. Over this week I was complaining to the other directors of the company about George's behaviour.  And I rather suspect that George was returning the compliment. Over that week the only contact I had with George was being pushed by him for a "more detailed Gantt."  I drew up another release plan. 

And then we had another meeting on the phone to discuss the project and the new more detailed plan. I think we might have gone through the list of impediments/blockers that I'd identified; come up some next actions for each point; and then assigned them to people on the call. 

George explained to us how important it was that the project was delivered on time and suggested that now we'd addressed all the points on my "impediments/blockers" list we should go round the (virtual) table and commit to delivering the project on time.

We went round the virtual table on the phone.  I heard developers, UI designers - who were the people on the call, all dutifully swear that they would deliver the project on time. 

When it came round to me, I said that I didn't think I couldn't commit to delivering the project on time. The issues that we'd talked about weren't resolved - we'd only agreed to look at them further. I also pointed out that our *actual velocity* in arranging the user workshops that we needed to start the project was about half what we'd initially predicted. Guess what? George hung up on me again, this time in the hearing of all the other members of the team.

I think now I have a better understanding of why George hung up on me, and also, an understanding of how I might have handled the whole situation better.

George was a leader (sociopath).  In the words of the other directors of Grill, the reason they had hired him, was because he "got things done." The key thing to understand about sociopaths is that they're willing to take risks, to gamble. The reason they're willing to gamble is that it's not their resources that they're gambling with and they suspect they are smart enough to take the credit and the rewards if things go well, and avoid the blame if things go badly. This is termed by the management thinker Venkatesh Rao the "Head I Win Tails You Lose" (HIWTYL) strategy.

George's formula for "getting things done" was relatively simple. Promise your client the earth. Agree to their costs and timescales, even though they're not sure of the requirements (they never are). Hiding the risks and costs of the project to the client (and to us as a company) is an important strategy that results in people like George "getting things done."

But in order to achieve the other part of his strategy - "Heads I Win, Tails You Lose" - George had to make sure that the development team and I had committed to delivering the project. When the project didn't deliver "On Time" (i.e. to the impossible timescales that we were already telling him were impossible) George would act disappointed. Also, part of the way that George "got things done" was by bulling the people who worked for him.

But I think this whole situation would have gone better if we hadn't been on the end of a phone, on both occasions, in a phone conference. By refusing to commit a detailed plan I was publicly defanging George in front of both his client and the team, taking away both his Fata Morgana (the clear mirage-like vision of the project when it will be 

One view of leaders (sociopaths) is that they are lazy - too lazy to understand programming, project management, the internet or what's going on around them. I think that laziness is a rather lazy concept. What we should always remember when you see people behaving in a leader (sociopathic) mode (and once you start looking you see it everywhere) is that they are pursuing a strategy that work, and without which almost nothing would get done.
 
Leaders (sociopaths) have realised that none of the technical stuff matters so much as the eternal human stuff - the politics. Maybe this is because they found out through trial and error that they weren't too good at the technical stuff.  Maybe this is because they realised (sooner that all the people who surround them who still think that the technical stuff is really important) that how good you are at the technical stuff is irrelevant if you can't deal with the politics and the perceptions that surround it.

Another way of thinking about this particular aspect of sociopath behaviour is that they've found a trick that works - manoeuvre your team into committing to something that you know that they can't deliver and then ruthlessly exploit their bad feeling to gain concessions, make them work late and absolve yourself of any blame.

The concept of commitment and consistency is one of the main reasons that managing software development is so unpleasant. Commitment and consistency are the electric cattle prods of project management. The power of commitment and consistency is outlined in Robert Cialdini's book "Influence: The Psychology of Persuasion".  We all like to honour our commitments and like to be consistent with what we say in terms of beliefs and ethical outlook. Cialdini cites studies where experimenters have managed to substantially increase the sign-up rates for an onerous task, for example standing on the street and shaking a tin for charity, simply by ringing people in advance of asking them to volunteer and asking them one simple question: "Do you think charity is a good thing?"

Commitment and Consistency is one of the darkest games that's going on in project management because it's in the nature software development projects that they are uncertain. It's also (because of the "planning fallacy" that we'll talk about in the chapter about thinking fast and slow) in the nature of planning any task that those undertaking the task will estimate a length of time for completing the task which is near the absolutely most optimistic time for undertaking that task.

Commitment and consistency is especially important in between indivuals of unequal status, for example master/servant relations. In most modern societies, the master is no longer actually allowed to beat the servant. But making the slave feel bad by pointing out that he or she has not kept their word, is still allowed, and this may not hurt physically, but it smarts psychologically.

Let's take the example of representative of the developers (servant) and a project manager (master), or a client (master) and a project manager (who's now the servant). The game is for the master to extract a commitment out of the servant.  The game for the servant is to avoid that commitment without getting fired. Why does the slave want to avoid the commitment? Surely a good slave would be accepting of responsibility. Well, the slave doesn't want to take on the commitment because of the nature of the commitment.

If the commitment from the slave to the master was something of the order of "make sure the house is clean and tidy by the time I get back this evening" it might be reasonable for the slave to agree. If the commitment extracted from the slave is "build me a mansion exactly to my taste and decorated throughout with the most modern furnishings from all over Europe on a budget of pennies, in hurricane season." The slave might want to avoid the commitment.  Most software development projects are nearer the latter kind of commitment.

Not honouring your commitments feels bad (for most people - except sociopaths, of which more later). Not honouring your commitments *looks* bad (for everybody, especially sociopaths, who care most about reputation and appearances). People who feel bad, people who are "on the back foot" (an image take from the game of cricket, alluding to a batsman who has been so surprised by the speed or spin of a ball that he's had to step back to try to defend himself from it - cricket balls are heavy - rather than moving forward onto his "front foot" to hit it out of the ground) aren't so cocky, they are more willing to make concessions, to do as they are told.

##We need to Talk about Sociopaths
Sociopaths are risk takers. They take risks with other people's money and with other people's jobs and livelihoods. They take risks where they have no business taking risks, without doing the proper research or where the proper research simply isn't possible. They encourage others to take these risks by exaggerating the possible benefits and obscuring the possible negative outcomes.  When things go right, they take the credit and reap the rewards.  When things go wrong, they don't blame others - because when things go wrong, they're simply not there. When things go wrong, they make sure that someone else is taking the blame and footing the bill.

Taking risks that they have no business taking? Taking the credit when they have no business taking the credit? Avoiding the blame when their risky endeavours flounder? These people sound very unpleasant and annoying. Why would we ever want people like this around?

Well, that's possibly the most annoying thing about sociopaths. Without them, nothing would get done.  Without these people who have no business taking the risks that they are taking there would be - well, there would be no business.

##The Super-Cultured Sociopath
When I made the list of topics that I was going to write about in this book, somehow, on first pass John Boyd didn't feature. This is a bit strange since Boyd's way of thinking about the world is definitely relevant to a "Fuck it" attitude to project management.  Boyd was a lot of things: fighter pilot, fighter pilot instructor, irritant to the Pentagon, inspiration to the marines, and was most probably the leading thinker about military strategy in the second half of the 20th century.  

One of the reasons that Boyd isn't more famous is that he didn't believe in boiling his message down to a few simple slogans. His main form of communication of his ideas was a ponderous slideshow presentation which took more than 8 hours, which he refused to reduce, not for anyone irrespective of rank.  The most memorable and concise aspect of his thinking is something called the OODA loop.  The acronym stands for Observe, Orient, Decide and Act.  Boyd thought that in any military situation any group involved in combat would be going through this series of steps (this is of course a lot like a number of other descriptions of a iterative approach to managing work, such as Deming/Shewart's Plan, Do, Check, Act cycle).

The top-level take away from Boyd's loop is that any combat group that can get round the OODA loop quicker than their enemy will be able to defeat their enemy. Boyd actually went further than that and suggested that any group that could get around the OODA loop faster than their enemy would leave their enemy in confusion - the enemy literally wouldn't know what hit them.

![The OODA Loop](images/OOdaLoop.png)

But there is an interesting extra level of detail in Boyd's iterative cycle which isn't there in other empirical inspect and adapt cycles.  Inside the second O of the OODA loop - Orient there are a network of 5 aspects for consideration in Orientation:
* Cultural Traditions

* Genetic Heritage

* Analysis and synthesis

* New Information

* Previous experiences

Boyd understood that it wasn't enough to observe what was going on: the observe phase.  In order to be successful a group had to orient to what was going on - they had to make *sense* of their observations. The education and experience of the observers is very important in determining the likely outcome of the project or expedition.

Elsewhere in this book we talk about how sociopaths are needed to get things done.  They are needed to initially hide the risks and uncertainty surrounding projects so that the projects get started in the first place (the hiding hand). They are needed to polish and overstate the purity, simplicity and quality of the product that the project will deliver (the Fata Morgana). The people who set projects going have to be sociopaths because they need to be willing to take the credit when a project goes well, and avoid the blame when the project fails.
What's interesting about Boyd's OODA loop is that it also indicates that they need to be educated and smart.

We pretty much know you you need to set up software development (iterative software development, probably using a whole slew of engineering practices like TDD, pair programming, source code control, continuous integration, continuous delivery), and some of those good practices are bound up in the "cultural traditions" of Boyd's orientation phase. But what if that just isn't enough? What if in order to improve the quality of the decisions being made by the people who are looking at the software you need to improve the quality of the *people* who are looking at the software.

One of the things that makes me think this is something that I read a long time ago about Bill Gates. Bill Gates would spend weeks reading about what was going on, in the world politically, in the economy *and* in the world of technology. When Steve Jobs made his famous visit to PARC and saw the Xerox Alto, he was *prepared* by his reading and his thinking to see the Xerox Alto for what it was and go back to the Apple offices and take ruthless advantage of what he'd seen.

In Scrum we talk about a product owner, the idea in Scrum is that the product owner acts as a representative for the organisation that wants a piece of software to be developed.  In OODA terms, the product owner is assumed to be capable doing *everything* inside the "Orient" phase of the OODA loop. In a more sophisticated version of Scrum, there will be at least an acknowledgement that as well changes to business orientation as a team goes around the OODA loop, there will also be changes in *technical* orientation which should be interpreted by a technical lead or architect. But still, this is a great deal of responsibility to place in the hands of one person.

I think the reason that Scrum does this is because Scrum (based on bitter experience) places a higher value on the speed of a decision relative to the quality of a decision and (again using an heuristic) deals with this by giving the ability to make these decisions to one person, the product owner rather than allowing them to be distributed across an organisation, thereby either slowing down the speed of decision-making, or stopping it altogether.

My colleague at Sopra Steria - Steve Forbes - suggests that there are four different areas of knowledge that are required by a product owner.

**1.Knowledge of the Organisation**

**2.Knowledge of the Technology**

**3.Knowledge of the Business**

**4.Knowledge of an Agile approach**

One interesting question to ask about this list is "where does Digital fit?" Does Digital transcend all of these areas of knowledge? What is the organisations attitude to digital innovation in this are? What are the organisation's strengths, weaknesses, opportunities and threats in this area? How does what we're doing relate to the technology? What is the whole business doing in this area in relation to technology?

When looked at from this point of view, knowledge of Agile seems to be a minor part of the recipe for success, perhaps necessary for successful delivery, but nowhere near sufficient.

Which leads us onto another really interesting question: how, as "Agile coaches" or any consultants brought in to try to help software development projects succeed, might we improve the quality of what goes on in the Orient phase of every iteration of project? What I find fascinating about this is that the activities in support of this orientation seem to happen hardly *at all*. Individuals who are signed up as product owners might get sent on a one or two-day course, this course in generally about Agile and/or product ownership. Do they go on any course that orients them within their organisation? Maybe? Does anyone give them a potted history of business's history of performance when engaging in similar projects in the past? Very unlikely? Do they go any course that orients them to the technical issues related to the product that they are owning? Probably not.

A final interesting question is what effect each of the stages has on the other stages. What is the effect of reducing the quality of orientation? Let's take that to the extreme? What if no orientation is done at all? If no orientation is done, then there is no need for observation, so poor quality orientation reduces the quality of observation, it also reduces the quality of decisions to zero (apart from the odd lucky guess). If there's no observation no orientation to inform the decision, there seems little point iterating.
